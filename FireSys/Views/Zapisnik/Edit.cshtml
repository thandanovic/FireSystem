@model FireSys.Models.ZapisnikViewModel

@{
    //ViewBag.Title = "Detalji zapisnika";
    Layout = "~/Views/Shared/_Layout.cshtml";
    Model.Zapisnik.DokumentacijaPrisutna = true;
}

<link type="text/css" rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid.min.css" />
<link type="text/css" rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid-theme.min.css" />

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid.min.js"></script>

<style>
    #wrapper {
        height: 90%;
    }

    #page-wrapper {
        height: 100%;
    }

    .content {
        height: 85%;
        margin-top: 10px;
    }

    .zapisnik {
        grid-area: zapisnik;
        height: 100%;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .aparati {
        grid-area: aparati;
        /*background-color: coral;*/
        height: 100%;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .hidranti {
        grid-area: hidranti;
        height: 100%;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .zapisnik-container {
        display: grid;
        grid-template-columns: 35% 65%;
        grid-template-rows: 50% 50%;
        grid-column-gap: 5px;
        grid-row-gap: 5px;
        grid-template-areas: "zapisnik aparati" "zapisnik aparati";
        height: 100%;
    }

    form {
        height: 100%;
        width: 100%;
    }

    .control-label {
        margin-left: 5px;
        margin-top: 5px;
    }

    .row {
        margin-bottom: 2px;
    }

    .text-width-50 {
        width: 50px;
    }

    .broj-zapisnika, .dokumentacija {
        display: flex;
    }

    .hidden {
        display: none;
    }

    .box-form {
        height: 94%;
    }

    .box-action {
        height: 6%;
        padding: 0 15px;
        display: flex;
        justify-content: space-between;
    }

    .header-actions {
        margin-top: 25px;
    }

    .selected-row > td {
        background: #e06377 !important;
        border-color: #e06377;
    }

    .jsgrid-selected-row > .jsgrid-cell {
        background: #d6d4e0 !important;
        border-color: #d6d4e0 !important;
    }


    .whiteButton {
        background: white;
        border: 0;
        color: black;
        padding: 0;
        height: auto;
    }

    .yellowButton {
        background: yellow;
        border: 0;
        color: black;
        padding: 0;
        height: auto;
    }
</style>

<script>

    $(function () {

        if ($('#Zapisnik_ZapisnikTipId').val() != 1) {
            $('.zapisnik-container').css("grid-template-areas", "'zapisnik hidranti' 'zapisnik hidranti'");
            $('.page-header-right').text('Lista hidranata na lokaciji');
        } else {
            $('.page-header-right').text('Lista aparata na lokaciji');
        }

        $('.header-left').html('<h1>Detalji zapisnika</h1>');

        var ispravnost = JSON.parse($("#boxIspravnost").val());
        var tip = JSON.parse($("#boxTip").val());
        var vrsta = JSON.parse($("#boxVrste").val());

        $("#aparatiGrid").jsGrid({
            width: "100%",
            height: "100%",
            inserting: @Model.Zapisnik.StatusId != 2,
            noDataContent: "Not found",
            editing: @Model.Zapisnik.StatusId != 2,
            sorting: true,
            data: [],
            paging: true,
            autoload: true,
            pageloading: true,
            filtering: true,
            controller: {
                loadData: function () {
                    var d = $.Deferred();

                    $.ajax({
                        url: "@Url.Action("GetZapisnikAparati", "Zapisnik")",
                        data: { zapisnikId: parseInt($("#ZapisnikId").val()) },
                        method: "GET",
                        dataType: "json"
                    }).done(function (response) {
                        d.resolve(JSON.parse(response.streamAparati));
                    });

                    return d.promise();
                },
                insertItem: function (insertingItem) {
                    insertingItem["LokacijaId"] = parseInt($("#LokacijaId").val());
                    insertingItem["ZapisnikId"] = parseInt($("#ZapisnikId").val());
                    var d = $.Deferred();
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("InsertZapisnikAparat", "Zapisnik")",
                        data: insertingItem
                    }).success(function (response) {
                        d.resolve(JSON.parse(response.item));
                    }).error(function (xhr, ajaxOptions, thrownError) {
                        d.resolve();
                    });

                    return d.promise();
                },
                updateItem: function (updatingItem) {
                    var d = $.Deferred();
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("UpdateZapisnikAparat", "Zapisnik")",
                        data: updatingItem
                    }).success(function (response) {
                        d.resolve(JSON.parse(response.item));
                    }).error(function (xhr, ajaxOptions, thrownError) {
                        d.resolve(updatingItem);
                    });

                    return d.promise();
                },
                deleteItem: function (deletingItem) {
                    var d = $.Deferred();
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("DeleteZapisnikAparat", "Zapisnik")",
                        data: deletingItem
                    }).success(function (response) {
                        d.resolve();
                    }).error(function (xhr, ajaxOptions, thrownError) {
                        d.resolve();
                    });

                    return d.promise();
                }

            },

            fields: [

                { name: "TipId", title: "Tip", type: "select", width: 70, items: tip, valueField: "VatrogasniAparatTipId", textField: "Naziv", validate: "required" },
                { name: "BrojAparata", title: "Broj aparata", type: "text", width: 50, validate: "required" },
                { name: "GodinaProizvodnje", title: "Godina proizvodnje", type: "number", width: 50, validate: "required" },
                { name: "VrijediDo", title: "Vrijedi do", type: "number", width: 50, validate: "required" },
                { name: "BrojKartice", title: "Broj kartice", type: "text", width: 50 },
                { name: "Napomena", type: "text" },
                { name: "IspravnostId", title: "Ispravnost", type: "select", width: 70, items: ispravnost, valueField: "IspravnostId", textField: "Naziv", validate: "required" },
                { name: "VrstaId", title: "Vrsta", type: "select", width: 70, items: vrsta, valueField: "VatrogasniAparatVrstaId", textField: "Naziv", validate: "required" },
                {
                    type: "control",
                    title: "Akcije",
                    deleteButton: @Model.Zapisnik.StatusId != 2,
                    editButton: @Model.Zapisnik.StatusId != 2
                    //itemTemplate: function (_, item) {
                    //    return '<a class="fa fa-edit" href="/Hidrants/Edit/' + item.ID + '"> </a> | <a class="fa fa-search" href="/Hidrants/Details/' + item.ID + '"> </a> | <a class="fa fa-trash-o" href="/Hidrants/Delete/' + item.ID + '"> </a>';
                    //}
                }
            ]
        });



    });

    function createWorkOrder(s, e){
        var d = $.Deferred();
        $.ajax({
            type: "POST",
            url: "@Url.Action("CreateWorkOrder", "Zapisnik")",
            data: { zapisnikID: $("#ZapisnikId").val()}
        }).success(function (response) {
            d.resolve();
            Utility.showErrorMessage(response.message);
        }).error(function (xhr, ajaxOptions, thrownError) {
            d.resolve();
        });

        return d.promise();
    }

    function returnOnOrderList(s, e){
        window.location.href = '/Zapisnik/Index';
    }

</script>

@section Actions {

    <script>
        function AddDevices(s, e) {
            var $extinguisher = $('#extinguishersModal');

            $extinguisher.modal('show');

            $extinguisher.off('shown.bs.modal').on('shown.bs.modal', function (e) {
                LoadExtinguishers();
            });
        }
    </script>


    @if (Model.Zapisnik.StatusId != 2)
    {
        @Html.DevExpress().Button(btn =>
{
    btn.Name = "btnAddDevices";
    btn.Text = "Dodaj aparate";
    btn.UseSubmitBehavior = false;
    btn.ClientSideEvents.Click = "AddDevices";
    //btn.ControlStyle.CssClass = "export-button";
    //btn.ControlStyle.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Middle;
}).GetHtml()
    }


}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="zapisnik-container">
        @Html.Hidden("LokacijaId", Model.Zapisnik.LokacijaId)
        @Html.Hidden("ZapisnikId", Model.Zapisnik.ZapisnikId)
        @Html.HiddenFor(model => model.Zapisnik.ZapisnikId)
        @Html.HiddenFor(model => model.Zapisnik.DatumKreiranja)

        <div class="zapisnik">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="box-form">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="Zapisnik.DatumZapisnika">Datum pregleda</label>
                        @Html.EditorFor(model => model.Zapisnik.DatumZapisnika, new { htmlAttributes = new { @Value = Helper.ToShortDate(Model.Zapisnik.DatumZapisnika), @class = "form-control date", placeholder = "Datum pregleda" } })
                        @Html.ValidationMessageFor(x => x.Zapisnik.DatumZapisnika)


                    </div>

                    <div class="form-group col-md-6">
                        <label for="Zapisnik.BrojZapisnika">Broj zapisnika</label>
                        <div class="broj-zapisnika">
                            @Html.EditorFor(model => model.Zapisnik.BrojZapisnika, new { htmlAttributes = new { @class = "form-control text-width-75" } })
                            @Html.EditorFor(model => model.Zapisnik.BrojZapisnikaMjesec, new { htmlAttributes = new { @class = "form-control text-width-75" } })
                            @Html.EditorFor(model => model.Zapisnik.BrojZapisnikaGodina, new { htmlAttributes = new { @class = "form-control text-width-75" } })
                            @Html.ValidationMessageFor(x => x.Zapisnik.BrojZapisnika)
                            @Html.ValidationMessageFor(x => x.Zapisnik.BrojZapisnikaMjesec)
                            @Html.ValidationMessageFor(x => x.Zapisnik.BrojZapisnikaGodina)


                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="KlijentId">Klijent</label>
                        @Html.DropDownListFor(x => x.KlijentId, Model.Klijenti, new { @class = "form-control dropdown-klijenti" })


                    </div>

                    <div class="form-group col-md-6">
                        <label for="RegijaId">Regija</label>
                        @Html.DropDownListFor(x => x.RegijaId, Model.Regije, "Odaberi regiju", new { @class = "form-control dropdown-regije" })
                    </div>
                </div>

                <div class="form-group col-md-12">
                    <label for="Zapisnik.LokacijaId">Lokacija</label>
                    @Html.DropDownListFor(x => x.Zapisnik.LokacijaId, Model.Lokacije, new { @class = "form-control dropdown-lokacije" })
                    @Html.ValidationMessageFor(x => x.Zapisnik.LokacijaId)


                </div>

                <div class="form-group col-md-12">
                    <label for="Zapisnik.ZapisnikTipId">Tip zapisnika</label>
                    @Html.DropDownListFor(x => x.Zapisnik.ZapisnikTipId, Model.TipoviZapisnika, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Zapisnik.ZapisnikTipId)


                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="Zapisnik.PregledIzvrsioId">Pregled izvršio</label>
                        @Html.DropDownListFor(x => x.Zapisnik.PregledIzvrsioId, Model.Zaposlenici, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.Zapisnik.PregledIzvrsioId)
                    </div>

                    <div class="form-group col-md-6">
                        <label for="Zapisnik.KorisnikKontrolisaoId">Kontrolisao</label>
                        @Html.DropDownListFor(x => x.Zapisnik.KorisnikKontrolisaoId, Model.Zaposlenici, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.Zapisnik.KorisnikKontrolisaoId)
                    </div>
                </div>

                <div class="form-group col-md-12">
                    <label for="Zapisnik.Napomena">Napomena</label>
                    @Html.TextAreaFor(model => model.Zapisnik.Napomena, new { @class = "form-control", @rows = 5 })
                </div>

                <div class="form-group col-md-6 dokumentacija hidden">
                    <label for="Zapisnik.DokumentacijaPrisutna">Dokumentacija prisutna</label>
                    @Html.CheckBoxFor(model => model.Zapisnik.DokumentacijaPrisutna.Value, new { @class = "form-control" })
                </div>


                <div class="form-group col-md-6 hidden">
                    <label for="Zapisnik.LokacijaHidranata">Lokacija hidranata</label>
                    @Html.RadioButtonFor(m => m.Zapisnik.LokacijaHidranata, "U objektu", new { id = "UObjektu", @checked = true }) U objektu
                    @Html.RadioButtonFor(m => m.Zapisnik.LokacijaHidranata, "Oko objekta", new { id = "OkoObjekta" }) Oko objekta
                </div>

                <div class="form-group col-md-12 hidden">
                    <label for="Zapisnik.HidrantPrikljucenNa">Hidrant priključen na</label>
                    @Html.TextAreaFor(model => model.Zapisnik.HidrantPrikljucenNa, new { @class = "form-control", @rows = 5 })
                </div>

            </div>

            <div class="box-action">

                @*<a class="btn btn-default" href="@Url.Action("Index", "Zapisnik")">Zatvori</a>*@

                @Html.DevExpress().Button(btn =>
               {
                   btn.Name = "btnClose";
                   btn.Text = "Zatvori";
                   btn.UseSubmitBehavior = false;
                   btn.ClientSideEvents.Click = "returnOnOrderList";
                   btn.ControlStyle.CssClass = "whiteButton";

               }).GetHtml()

                @if (Model.Zapisnik.StatusId == 2 && Model.Zapisnik.IzRadnogNalogaId == null && Model.Zapisnik.KreiraniRadniNalogId == null)
                {

                    @Html.DevExpress().Button(btn =>
               {
                   btn.Name = "btnCreateWorkOrder";
                   btn.Text = "Kreiraj radni nalog";
                   btn.UseSubmitBehavior = false;
                   btn.ClientSideEvents.Click = "createWorkOrder";
                   btn.ControlStyle.CssClass = "yellowButton";

               }).GetHtml();
                }

                    @if (Model.Zapisnik.StatusId != 2)
                    {
                    @Html.DevExpress().Button(btn =>
               {
                   btn.Name = "btnSubmitRecord";
                   btn.Text = "Spasi zapisnik";
                   btn.UseSubmitBehavior = true;

               }).GetHtml();
                    @*<button type="submit" class="btn btn-danger pull-right">Spasi</button>*@
                }
            </div>
        </div>

        <div class="aparati">
            @Html.Hidden("boxTip", ViewData["Tipovi"])
            @Html.Hidden("boxLokacije", ViewData["Lokacije"])
            @Html.Hidden("boxIspravnost", ViewData["Ispravnosti"])
            @Html.Hidden("boxVrste", ViewData["Vrste"])
            <div id="aparatiGrid"></div>
        </div>

        <div class="hidranti">
        </div>
    </div>
}


@Html.Partial("~/Views/Zapisnik/AddExtinguishers.cshtml")


